// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cardGame/ent/leaderboard"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Leaderboard is the model entity for the Leaderboard schema.
type Leaderboard struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PlayerID holds the value of the "playerID" field.
	PlayerID string `json:"playerID,omitempty"`
	// Counts holds the value of the "counts" field.
	Counts       int `json:"counts,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Leaderboard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case leaderboard.FieldID, leaderboard.FieldCounts:
			values[i] = new(sql.NullInt64)
		case leaderboard.FieldPlayerID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Leaderboard fields.
func (l *Leaderboard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case leaderboard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case leaderboard.FieldPlayerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field playerID", values[i])
			} else if value.Valid {
				l.PlayerID = value.String
			}
		case leaderboard.FieldCounts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field counts", values[i])
			} else if value.Valid {
				l.Counts = int(value.Int64)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Leaderboard.
// This includes values selected through modifiers, order, etc.
func (l *Leaderboard) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// Update returns a builder for updating this Leaderboard.
// Note that you need to call Leaderboard.Unwrap() before calling this method if this Leaderboard
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Leaderboard) Update() *LeaderboardUpdateOne {
	return NewLeaderboardClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Leaderboard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Leaderboard) Unwrap() *Leaderboard {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Leaderboard is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Leaderboard) String() string {
	var builder strings.Builder
	builder.WriteString("Leaderboard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("playerID=")
	builder.WriteString(l.PlayerID)
	builder.WriteString(", ")
	builder.WriteString("counts=")
	builder.WriteString(fmt.Sprintf("%v", l.Counts))
	builder.WriteByte(')')
	return builder.String()
}

// Leaderboards is a parsable slice of Leaderboard.
type Leaderboards []*Leaderboard
