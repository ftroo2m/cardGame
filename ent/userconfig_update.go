// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cardGame/ent/predicate"
	"cardGame/ent/userconfig"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserConfigUpdate is the builder for updating UserConfig entities.
type UserConfigUpdate struct {
	config
	hooks    []Hook
	mutation *UserConfigMutation
}

// Where appends a list predicates to the UserConfigUpdate builder.
func (ucu *UserConfigUpdate) Where(ps ...predicate.UserConfig) *UserConfigUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetPlayerID sets the "playerID" field.
func (ucu *UserConfigUpdate) SetPlayerID(s string) *UserConfigUpdate {
	ucu.mutation.SetPlayerID(s)
	return ucu
}

// SetNillablePlayerID sets the "playerID" field if the given value is not nil.
func (ucu *UserConfigUpdate) SetNillablePlayerID(s *string) *UserConfigUpdate {
	if s != nil {
		ucu.SetPlayerID(*s)
	}
	return ucu
}

// SetCards sets the "cards" field.
func (ucu *UserConfigUpdate) SetCards(s []string) *UserConfigUpdate {
	ucu.mutation.SetCards(s)
	return ucu
}

// AppendCards appends s to the "cards" field.
func (ucu *UserConfigUpdate) AppendCards(s []string) *UserConfigUpdate {
	ucu.mutation.AppendCards(s)
	return ucu
}

// SetLadder sets the "ladder" field.
func (ucu *UserConfigUpdate) SetLadder(s string) *UserConfigUpdate {
	ucu.mutation.SetLadder(s)
	return ucu
}

// SetNillableLadder sets the "ladder" field if the given value is not nil.
func (ucu *UserConfigUpdate) SetNillableLadder(s *string) *UserConfigUpdate {
	if s != nil {
		ucu.SetLadder(*s)
	}
	return ucu
}

// SetPlayerHP sets the "playerHP" field.
func (ucu *UserConfigUpdate) SetPlayerHP(i int) *UserConfigUpdate {
	ucu.mutation.ResetPlayerHP()
	ucu.mutation.SetPlayerHP(i)
	return ucu
}

// SetNillablePlayerHP sets the "playerHP" field if the given value is not nil.
func (ucu *UserConfigUpdate) SetNillablePlayerHP(i *int) *UserConfigUpdate {
	if i != nil {
		ucu.SetPlayerHP(*i)
	}
	return ucu
}

// AddPlayerHP adds i to the "playerHP" field.
func (ucu *UserConfigUpdate) AddPlayerHP(i int) *UserConfigUpdate {
	ucu.mutation.AddPlayerHP(i)
	return ucu
}

// SetPlayerEnergy sets the "playerEnergy" field.
func (ucu *UserConfigUpdate) SetPlayerEnergy(i int) *UserConfigUpdate {
	ucu.mutation.ResetPlayerEnergy()
	ucu.mutation.SetPlayerEnergy(i)
	return ucu
}

// SetNillablePlayerEnergy sets the "playerEnergy" field if the given value is not nil.
func (ucu *UserConfigUpdate) SetNillablePlayerEnergy(i *int) *UserConfigUpdate {
	if i != nil {
		ucu.SetPlayerEnergy(*i)
	}
	return ucu
}

// AddPlayerEnergy adds i to the "playerEnergy" field.
func (ucu *UserConfigUpdate) AddPlayerEnergy(i int) *UserConfigUpdate {
	ucu.mutation.AddPlayerEnergy(i)
	return ucu
}

// SetImage sets the "image" field.
func (ucu *UserConfigUpdate) SetImage(s string) *UserConfigUpdate {
	ucu.mutation.SetImage(s)
	return ucu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ucu *UserConfigUpdate) SetNillableImage(s *string) *UserConfigUpdate {
	if s != nil {
		ucu.SetImage(*s)
	}
	return ucu
}

// ClearImage clears the value of the "image" field.
func (ucu *UserConfigUpdate) ClearImage() *UserConfigUpdate {
	ucu.mutation.ClearImage()
	return ucu
}

// Mutation returns the UserConfigMutation object of the builder.
func (ucu *UserConfigUpdate) Mutation() *UserConfigMutation {
	return ucu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucu.sqlSave, ucu.mutation, ucu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserConfigUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserConfigUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucu *UserConfigUpdate) check() error {
	if v, ok := ucu.mutation.PlayerID(); ok {
		if err := userconfig.PlayerIDValidator(v); err != nil {
			return &ValidationError{Name: "playerID", err: fmt.Errorf(`ent: validator failed for field "UserConfig.playerID": %w`, err)}
		}
	}
	if v, ok := ucu.mutation.Ladder(); ok {
		if err := userconfig.LadderValidator(v); err != nil {
			return &ValidationError{Name: "ladder", err: fmt.Errorf(`ent: validator failed for field "UserConfig.ladder": %w`, err)}
		}
	}
	return nil
}

func (ucu *UserConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ucu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userconfig.Table, userconfig.Columns, sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeInt))
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.PlayerID(); ok {
		_spec.SetField(userconfig.FieldPlayerID, field.TypeString, value)
	}
	if value, ok := ucu.mutation.Cards(); ok {
		_spec.SetField(userconfig.FieldCards, field.TypeJSON, value)
	}
	if value, ok := ucu.mutation.AppendedCards(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userconfig.FieldCards, value)
		})
	}
	if value, ok := ucu.mutation.Ladder(); ok {
		_spec.SetField(userconfig.FieldLadder, field.TypeString, value)
	}
	if value, ok := ucu.mutation.PlayerHP(); ok {
		_spec.SetField(userconfig.FieldPlayerHP, field.TypeInt, value)
	}
	if value, ok := ucu.mutation.AddedPlayerHP(); ok {
		_spec.AddField(userconfig.FieldPlayerHP, field.TypeInt, value)
	}
	if value, ok := ucu.mutation.PlayerEnergy(); ok {
		_spec.SetField(userconfig.FieldPlayerEnergy, field.TypeInt, value)
	}
	if value, ok := ucu.mutation.AddedPlayerEnergy(); ok {
		_spec.AddField(userconfig.FieldPlayerEnergy, field.TypeInt, value)
	}
	if value, ok := ucu.mutation.Image(); ok {
		_spec.SetField(userconfig.FieldImage, field.TypeString, value)
	}
	if ucu.mutation.ImageCleared() {
		_spec.ClearField(userconfig.FieldImage, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucu.mutation.done = true
	return n, nil
}

// UserConfigUpdateOne is the builder for updating a single UserConfig entity.
type UserConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserConfigMutation
}

// SetPlayerID sets the "playerID" field.
func (ucuo *UserConfigUpdateOne) SetPlayerID(s string) *UserConfigUpdateOne {
	ucuo.mutation.SetPlayerID(s)
	return ucuo
}

// SetNillablePlayerID sets the "playerID" field if the given value is not nil.
func (ucuo *UserConfigUpdateOne) SetNillablePlayerID(s *string) *UserConfigUpdateOne {
	if s != nil {
		ucuo.SetPlayerID(*s)
	}
	return ucuo
}

// SetCards sets the "cards" field.
func (ucuo *UserConfigUpdateOne) SetCards(s []string) *UserConfigUpdateOne {
	ucuo.mutation.SetCards(s)
	return ucuo
}

// AppendCards appends s to the "cards" field.
func (ucuo *UserConfigUpdateOne) AppendCards(s []string) *UserConfigUpdateOne {
	ucuo.mutation.AppendCards(s)
	return ucuo
}

// SetLadder sets the "ladder" field.
func (ucuo *UserConfigUpdateOne) SetLadder(s string) *UserConfigUpdateOne {
	ucuo.mutation.SetLadder(s)
	return ucuo
}

// SetNillableLadder sets the "ladder" field if the given value is not nil.
func (ucuo *UserConfigUpdateOne) SetNillableLadder(s *string) *UserConfigUpdateOne {
	if s != nil {
		ucuo.SetLadder(*s)
	}
	return ucuo
}

// SetPlayerHP sets the "playerHP" field.
func (ucuo *UserConfigUpdateOne) SetPlayerHP(i int) *UserConfigUpdateOne {
	ucuo.mutation.ResetPlayerHP()
	ucuo.mutation.SetPlayerHP(i)
	return ucuo
}

// SetNillablePlayerHP sets the "playerHP" field if the given value is not nil.
func (ucuo *UserConfigUpdateOne) SetNillablePlayerHP(i *int) *UserConfigUpdateOne {
	if i != nil {
		ucuo.SetPlayerHP(*i)
	}
	return ucuo
}

// AddPlayerHP adds i to the "playerHP" field.
func (ucuo *UserConfigUpdateOne) AddPlayerHP(i int) *UserConfigUpdateOne {
	ucuo.mutation.AddPlayerHP(i)
	return ucuo
}

// SetPlayerEnergy sets the "playerEnergy" field.
func (ucuo *UserConfigUpdateOne) SetPlayerEnergy(i int) *UserConfigUpdateOne {
	ucuo.mutation.ResetPlayerEnergy()
	ucuo.mutation.SetPlayerEnergy(i)
	return ucuo
}

// SetNillablePlayerEnergy sets the "playerEnergy" field if the given value is not nil.
func (ucuo *UserConfigUpdateOne) SetNillablePlayerEnergy(i *int) *UserConfigUpdateOne {
	if i != nil {
		ucuo.SetPlayerEnergy(*i)
	}
	return ucuo
}

// AddPlayerEnergy adds i to the "playerEnergy" field.
func (ucuo *UserConfigUpdateOne) AddPlayerEnergy(i int) *UserConfigUpdateOne {
	ucuo.mutation.AddPlayerEnergy(i)
	return ucuo
}

// SetImage sets the "image" field.
func (ucuo *UserConfigUpdateOne) SetImage(s string) *UserConfigUpdateOne {
	ucuo.mutation.SetImage(s)
	return ucuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ucuo *UserConfigUpdateOne) SetNillableImage(s *string) *UserConfigUpdateOne {
	if s != nil {
		ucuo.SetImage(*s)
	}
	return ucuo
}

// ClearImage clears the value of the "image" field.
func (ucuo *UserConfigUpdateOne) ClearImage() *UserConfigUpdateOne {
	ucuo.mutation.ClearImage()
	return ucuo
}

// Mutation returns the UserConfigMutation object of the builder.
func (ucuo *UserConfigUpdateOne) Mutation() *UserConfigMutation {
	return ucuo.mutation
}

// Where appends a list predicates to the UserConfigUpdate builder.
func (ucuo *UserConfigUpdateOne) Where(ps ...predicate.UserConfig) *UserConfigUpdateOne {
	ucuo.mutation.Where(ps...)
	return ucuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserConfigUpdateOne) Select(field string, fields ...string) *UserConfigUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserConfig entity.
func (ucuo *UserConfigUpdateOne) Save(ctx context.Context) (*UserConfig, error) {
	return withHooks(ctx, ucuo.sqlSave, ucuo.mutation, ucuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserConfigUpdateOne) SaveX(ctx context.Context) *UserConfig {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserConfigUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucuo *UserConfigUpdateOne) check() error {
	if v, ok := ucuo.mutation.PlayerID(); ok {
		if err := userconfig.PlayerIDValidator(v); err != nil {
			return &ValidationError{Name: "playerID", err: fmt.Errorf(`ent: validator failed for field "UserConfig.playerID": %w`, err)}
		}
	}
	if v, ok := ucuo.mutation.Ladder(); ok {
		if err := userconfig.LadderValidator(v); err != nil {
			return &ValidationError{Name: "ladder", err: fmt.Errorf(`ent: validator failed for field "UserConfig.ladder": %w`, err)}
		}
	}
	return nil
}

func (ucuo *UserConfigUpdateOne) sqlSave(ctx context.Context) (_node *UserConfig, err error) {
	if err := ucuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userconfig.Table, userconfig.Columns, sqlgraph.NewFieldSpec(userconfig.FieldID, field.TypeInt))
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userconfig.FieldID)
		for _, f := range fields {
			if !userconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.PlayerID(); ok {
		_spec.SetField(userconfig.FieldPlayerID, field.TypeString, value)
	}
	if value, ok := ucuo.mutation.Cards(); ok {
		_spec.SetField(userconfig.FieldCards, field.TypeJSON, value)
	}
	if value, ok := ucuo.mutation.AppendedCards(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, userconfig.FieldCards, value)
		})
	}
	if value, ok := ucuo.mutation.Ladder(); ok {
		_spec.SetField(userconfig.FieldLadder, field.TypeString, value)
	}
	if value, ok := ucuo.mutation.PlayerHP(); ok {
		_spec.SetField(userconfig.FieldPlayerHP, field.TypeInt, value)
	}
	if value, ok := ucuo.mutation.AddedPlayerHP(); ok {
		_spec.AddField(userconfig.FieldPlayerHP, field.TypeInt, value)
	}
	if value, ok := ucuo.mutation.PlayerEnergy(); ok {
		_spec.SetField(userconfig.FieldPlayerEnergy, field.TypeInt, value)
	}
	if value, ok := ucuo.mutation.AddedPlayerEnergy(); ok {
		_spec.AddField(userconfig.FieldPlayerEnergy, field.TypeInt, value)
	}
	if value, ok := ucuo.mutation.Image(); ok {
		_spec.SetField(userconfig.FieldImage, field.TypeString, value)
	}
	if ucuo.mutation.ImageCleared() {
		_spec.ClearField(userconfig.FieldImage, field.TypeString)
	}
	_node = &UserConfig{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucuo.mutation.done = true
	return _node, nil
}
