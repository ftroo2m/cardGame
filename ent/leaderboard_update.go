// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cardGame/ent/leaderboard"
	"cardGame/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LeaderboardUpdate is the builder for updating Leaderboard entities.
type LeaderboardUpdate struct {
	config
	hooks    []Hook
	mutation *LeaderboardMutation
}

// Where appends a list predicates to the LeaderboardUpdate builder.
func (lu *LeaderboardUpdate) Where(ps ...predicate.Leaderboard) *LeaderboardUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetPlayerID sets the "playerID" field.
func (lu *LeaderboardUpdate) SetPlayerID(s string) *LeaderboardUpdate {
	lu.mutation.SetPlayerID(s)
	return lu
}

// SetNillablePlayerID sets the "playerID" field if the given value is not nil.
func (lu *LeaderboardUpdate) SetNillablePlayerID(s *string) *LeaderboardUpdate {
	if s != nil {
		lu.SetPlayerID(*s)
	}
	return lu
}

// SetCounts sets the "counts" field.
func (lu *LeaderboardUpdate) SetCounts(i int) *LeaderboardUpdate {
	lu.mutation.ResetCounts()
	lu.mutation.SetCounts(i)
	return lu
}

// SetNillableCounts sets the "counts" field if the given value is not nil.
func (lu *LeaderboardUpdate) SetNillableCounts(i *int) *LeaderboardUpdate {
	if i != nil {
		lu.SetCounts(*i)
	}
	return lu
}

// AddCounts adds i to the "counts" field.
func (lu *LeaderboardUpdate) AddCounts(i int) *LeaderboardUpdate {
	lu.mutation.AddCounts(i)
	return lu
}

// Mutation returns the LeaderboardMutation object of the builder.
func (lu *LeaderboardUpdate) Mutation() *LeaderboardMutation {
	return lu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LeaderboardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LeaderboardUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LeaderboardUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LeaderboardUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LeaderboardUpdate) check() error {
	if v, ok := lu.mutation.PlayerID(); ok {
		if err := leaderboard.PlayerIDValidator(v); err != nil {
			return &ValidationError{Name: "playerID", err: fmt.Errorf(`ent: validator failed for field "Leaderboard.playerID": %w`, err)}
		}
	}
	return nil
}

func (lu *LeaderboardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(leaderboard.Table, leaderboard.Columns, sqlgraph.NewFieldSpec(leaderboard.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.PlayerID(); ok {
		_spec.SetField(leaderboard.FieldPlayerID, field.TypeString, value)
	}
	if value, ok := lu.mutation.Counts(); ok {
		_spec.SetField(leaderboard.FieldCounts, field.TypeInt, value)
	}
	if value, ok := lu.mutation.AddedCounts(); ok {
		_spec.AddField(leaderboard.FieldCounts, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{leaderboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LeaderboardUpdateOne is the builder for updating a single Leaderboard entity.
type LeaderboardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LeaderboardMutation
}

// SetPlayerID sets the "playerID" field.
func (luo *LeaderboardUpdateOne) SetPlayerID(s string) *LeaderboardUpdateOne {
	luo.mutation.SetPlayerID(s)
	return luo
}

// SetNillablePlayerID sets the "playerID" field if the given value is not nil.
func (luo *LeaderboardUpdateOne) SetNillablePlayerID(s *string) *LeaderboardUpdateOne {
	if s != nil {
		luo.SetPlayerID(*s)
	}
	return luo
}

// SetCounts sets the "counts" field.
func (luo *LeaderboardUpdateOne) SetCounts(i int) *LeaderboardUpdateOne {
	luo.mutation.ResetCounts()
	luo.mutation.SetCounts(i)
	return luo
}

// SetNillableCounts sets the "counts" field if the given value is not nil.
func (luo *LeaderboardUpdateOne) SetNillableCounts(i *int) *LeaderboardUpdateOne {
	if i != nil {
		luo.SetCounts(*i)
	}
	return luo
}

// AddCounts adds i to the "counts" field.
func (luo *LeaderboardUpdateOne) AddCounts(i int) *LeaderboardUpdateOne {
	luo.mutation.AddCounts(i)
	return luo
}

// Mutation returns the LeaderboardMutation object of the builder.
func (luo *LeaderboardUpdateOne) Mutation() *LeaderboardMutation {
	return luo.mutation
}

// Where appends a list predicates to the LeaderboardUpdate builder.
func (luo *LeaderboardUpdateOne) Where(ps ...predicate.Leaderboard) *LeaderboardUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LeaderboardUpdateOne) Select(field string, fields ...string) *LeaderboardUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Leaderboard entity.
func (luo *LeaderboardUpdateOne) Save(ctx context.Context) (*Leaderboard, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LeaderboardUpdateOne) SaveX(ctx context.Context) *Leaderboard {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LeaderboardUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LeaderboardUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LeaderboardUpdateOne) check() error {
	if v, ok := luo.mutation.PlayerID(); ok {
		if err := leaderboard.PlayerIDValidator(v); err != nil {
			return &ValidationError{Name: "playerID", err: fmt.Errorf(`ent: validator failed for field "Leaderboard.playerID": %w`, err)}
		}
	}
	return nil
}

func (luo *LeaderboardUpdateOne) sqlSave(ctx context.Context) (_node *Leaderboard, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(leaderboard.Table, leaderboard.Columns, sqlgraph.NewFieldSpec(leaderboard.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Leaderboard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, leaderboard.FieldID)
		for _, f := range fields {
			if !leaderboard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != leaderboard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.PlayerID(); ok {
		_spec.SetField(leaderboard.FieldPlayerID, field.TypeString, value)
	}
	if value, ok := luo.mutation.Counts(); ok {
		_spec.SetField(leaderboard.FieldCounts, field.TypeInt, value)
	}
	if value, ok := luo.mutation.AddedCounts(); ok {
		_spec.AddField(leaderboard.FieldCounts, field.TypeInt, value)
	}
	_node = &Leaderboard{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{leaderboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
