// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cardGame/ent/card"
	"cardGame/ent/monster"
	"cardGame/ent/predicate"
	"cardGame/ent/user"
	"cardGame/ent/userconfig"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCard       = "Card"
	TypeMonster    = "Monster"
	TypeUser       = "User"
	TypeUserConfig = "UserConfig"
)

// CardMutation represents an operation that mutates the Card nodes in the graph.
type CardMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Name         *string
	_Type         *string
	_Energy       *int
	add_Energy    *int
	_Target       *string
	_Block        *int
	add_Block     *int
	_Damage       *int
	add_Damage    *int
	_Power        *map[string]int
	_Action       *[]string
	append_Action []string
	_Description  *string
	_Image        *string
	_Upgrade      *int
	add_Upgrade   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Card, error)
	predicates    []predicate.Card
}

var _ ent.Mutation = (*CardMutation)(nil)

// cardOption allows management of the mutation configuration using functional options.
type cardOption func(*CardMutation)

// newCardMutation creates new mutation for the Card entity.
func newCardMutation(c config, op Op, opts ...cardOption) *CardMutation {
	m := &CardMutation{
		config:        c,
		op:            op,
		typ:           TypeCard,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCardID sets the ID field of the mutation.
func withCardID(id int) cardOption {
	return func(m *CardMutation) {
		var (
			err   error
			once  sync.Once
			value *Card
		)
		m.oldValue = func(ctx context.Context) (*Card, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Card.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCard sets the old Card of the mutation.
func withCard(node *Card) cardOption {
	return func(m *CardMutation) {
		m.oldValue = func(context.Context) (*Card, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CardMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CardMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Card.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "Name" field.
func (m *CardMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *CardMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *CardMutation) ResetName() {
	m._Name = nil
}

// SetType sets the "Type" field.
func (m *CardMutation) SetType(s string) {
	m._Type = &s
}

// GetType returns the value of the "Type" field in the mutation.
func (m *CardMutation) GetType() (r string, exists bool) {
	v := m._Type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "Type" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "Type" field.
func (m *CardMutation) ResetType() {
	m._Type = nil
}

// SetEnergy sets the "Energy" field.
func (m *CardMutation) SetEnergy(i int) {
	m._Energy = &i
	m.add_Energy = nil
}

// Energy returns the value of the "Energy" field in the mutation.
func (m *CardMutation) Energy() (r int, exists bool) {
	v := m._Energy
	if v == nil {
		return
	}
	return *v, true
}

// OldEnergy returns the old "Energy" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldEnergy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnergy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnergy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnergy: %w", err)
	}
	return oldValue.Energy, nil
}

// AddEnergy adds i to the "Energy" field.
func (m *CardMutation) AddEnergy(i int) {
	if m.add_Energy != nil {
		*m.add_Energy += i
	} else {
		m.add_Energy = &i
	}
}

// AddedEnergy returns the value that was added to the "Energy" field in this mutation.
func (m *CardMutation) AddedEnergy() (r int, exists bool) {
	v := m.add_Energy
	if v == nil {
		return
	}
	return *v, true
}

// ResetEnergy resets all changes to the "Energy" field.
func (m *CardMutation) ResetEnergy() {
	m._Energy = nil
	m.add_Energy = nil
}

// SetTarget sets the "Target" field.
func (m *CardMutation) SetTarget(s string) {
	m._Target = &s
}

// Target returns the value of the "Target" field in the mutation.
func (m *CardMutation) Target() (r string, exists bool) {
	v := m._Target
	if v == nil {
		return
	}
	return *v, true
}

// OldTarget returns the old "Target" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldTarget(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTarget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTarget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTarget: %w", err)
	}
	return oldValue.Target, nil
}

// ResetTarget resets all changes to the "Target" field.
func (m *CardMutation) ResetTarget() {
	m._Target = nil
}

// SetBlock sets the "Block" field.
func (m *CardMutation) SetBlock(i int) {
	m._Block = &i
	m.add_Block = nil
}

// Block returns the value of the "Block" field in the mutation.
func (m *CardMutation) Block() (r int, exists bool) {
	v := m._Block
	if v == nil {
		return
	}
	return *v, true
}

// OldBlock returns the old "Block" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldBlock(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlock: %w", err)
	}
	return oldValue.Block, nil
}

// AddBlock adds i to the "Block" field.
func (m *CardMutation) AddBlock(i int) {
	if m.add_Block != nil {
		*m.add_Block += i
	} else {
		m.add_Block = &i
	}
}

// AddedBlock returns the value that was added to the "Block" field in this mutation.
func (m *CardMutation) AddedBlock() (r int, exists bool) {
	v := m.add_Block
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlock resets all changes to the "Block" field.
func (m *CardMutation) ResetBlock() {
	m._Block = nil
	m.add_Block = nil
}

// SetDamage sets the "Damage" field.
func (m *CardMutation) SetDamage(i int) {
	m._Damage = &i
	m.add_Damage = nil
}

// Damage returns the value of the "Damage" field in the mutation.
func (m *CardMutation) Damage() (r int, exists bool) {
	v := m._Damage
	if v == nil {
		return
	}
	return *v, true
}

// OldDamage returns the old "Damage" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldDamage(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDamage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDamage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDamage: %w", err)
	}
	return oldValue.Damage, nil
}

// AddDamage adds i to the "Damage" field.
func (m *CardMutation) AddDamage(i int) {
	if m.add_Damage != nil {
		*m.add_Damage += i
	} else {
		m.add_Damage = &i
	}
}

// AddedDamage returns the value that was added to the "Damage" field in this mutation.
func (m *CardMutation) AddedDamage() (r int, exists bool) {
	v := m.add_Damage
	if v == nil {
		return
	}
	return *v, true
}

// ResetDamage resets all changes to the "Damage" field.
func (m *CardMutation) ResetDamage() {
	m._Damage = nil
	m.add_Damage = nil
}

// SetPower sets the "Power" field.
func (m *CardMutation) SetPower(value map[string]int) {
	m._Power = &value
}

// Power returns the value of the "Power" field in the mutation.
func (m *CardMutation) Power() (r map[string]int, exists bool) {
	v := m._Power
	if v == nil {
		return
	}
	return *v, true
}

// OldPower returns the old "Power" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldPower(ctx context.Context) (v map[string]int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPower: %w", err)
	}
	return oldValue.Power, nil
}

// ResetPower resets all changes to the "Power" field.
func (m *CardMutation) ResetPower() {
	m._Power = nil
}

// SetAction sets the "Action" field.
func (m *CardMutation) SetAction(s []string) {
	m._Action = &s
	m.append_Action = nil
}

// Action returns the value of the "Action" field in the mutation.
func (m *CardMutation) Action() (r []string, exists bool) {
	v := m._Action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "Action" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldAction(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// AppendAction adds s to the "Action" field.
func (m *CardMutation) AppendAction(s []string) {
	m.append_Action = append(m.append_Action, s...)
}

// AppendedAction returns the list of values that were appended to the "Action" field in this mutation.
func (m *CardMutation) AppendedAction() ([]string, bool) {
	if len(m.append_Action) == 0 {
		return nil, false
	}
	return m.append_Action, true
}

// ResetAction resets all changes to the "Action" field.
func (m *CardMutation) ResetAction() {
	m._Action = nil
	m.append_Action = nil
}

// SetDescription sets the "Description" field.
func (m *CardMutation) SetDescription(s string) {
	m._Description = &s
}

// Description returns the value of the "Description" field in the mutation.
func (m *CardMutation) Description() (r string, exists bool) {
	v := m._Description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "Description" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "Description" field.
func (m *CardMutation) ResetDescription() {
	m._Description = nil
}

// SetImage sets the "Image" field.
func (m *CardMutation) SetImage(s string) {
	m._Image = &s
}

// Image returns the value of the "Image" field in the mutation.
func (m *CardMutation) Image() (r string, exists bool) {
	v := m._Image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "Image" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "Image" field.
func (m *CardMutation) ResetImage() {
	m._Image = nil
}

// SetUpgrade sets the "Upgrade" field.
func (m *CardMutation) SetUpgrade(i int) {
	m._Upgrade = &i
	m.add_Upgrade = nil
}

// Upgrade returns the value of the "Upgrade" field in the mutation.
func (m *CardMutation) Upgrade() (r int, exists bool) {
	v := m._Upgrade
	if v == nil {
		return
	}
	return *v, true
}

// OldUpgrade returns the old "Upgrade" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldUpgrade(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpgrade is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpgrade requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpgrade: %w", err)
	}
	return oldValue.Upgrade, nil
}

// AddUpgrade adds i to the "Upgrade" field.
func (m *CardMutation) AddUpgrade(i int) {
	if m.add_Upgrade != nil {
		*m.add_Upgrade += i
	} else {
		m.add_Upgrade = &i
	}
}

// AddedUpgrade returns the value that was added to the "Upgrade" field in this mutation.
func (m *CardMutation) AddedUpgrade() (r int, exists bool) {
	v := m.add_Upgrade
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpgrade resets all changes to the "Upgrade" field.
func (m *CardMutation) ResetUpgrade() {
	m._Upgrade = nil
	m.add_Upgrade = nil
}

// Where appends a list predicates to the CardMutation builder.
func (m *CardMutation) Where(ps ...predicate.Card) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CardMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CardMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Card, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CardMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CardMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Card).
func (m *CardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CardMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m._Name != nil {
		fields = append(fields, card.FieldName)
	}
	if m._Type != nil {
		fields = append(fields, card.FieldType)
	}
	if m._Energy != nil {
		fields = append(fields, card.FieldEnergy)
	}
	if m._Target != nil {
		fields = append(fields, card.FieldTarget)
	}
	if m._Block != nil {
		fields = append(fields, card.FieldBlock)
	}
	if m._Damage != nil {
		fields = append(fields, card.FieldDamage)
	}
	if m._Power != nil {
		fields = append(fields, card.FieldPower)
	}
	if m._Action != nil {
		fields = append(fields, card.FieldAction)
	}
	if m._Description != nil {
		fields = append(fields, card.FieldDescription)
	}
	if m._Image != nil {
		fields = append(fields, card.FieldImage)
	}
	if m._Upgrade != nil {
		fields = append(fields, card.FieldUpgrade)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case card.FieldName:
		return m.Name()
	case card.FieldType:
		return m.GetType()
	case card.FieldEnergy:
		return m.Energy()
	case card.FieldTarget:
		return m.Target()
	case card.FieldBlock:
		return m.Block()
	case card.FieldDamage:
		return m.Damage()
	case card.FieldPower:
		return m.Power()
	case card.FieldAction:
		return m.Action()
	case card.FieldDescription:
		return m.Description()
	case card.FieldImage:
		return m.Image()
	case card.FieldUpgrade:
		return m.Upgrade()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case card.FieldName:
		return m.OldName(ctx)
	case card.FieldType:
		return m.OldType(ctx)
	case card.FieldEnergy:
		return m.OldEnergy(ctx)
	case card.FieldTarget:
		return m.OldTarget(ctx)
	case card.FieldBlock:
		return m.OldBlock(ctx)
	case card.FieldDamage:
		return m.OldDamage(ctx)
	case card.FieldPower:
		return m.OldPower(ctx)
	case card.FieldAction:
		return m.OldAction(ctx)
	case card.FieldDescription:
		return m.OldDescription(ctx)
	case card.FieldImage:
		return m.OldImage(ctx)
	case card.FieldUpgrade:
		return m.OldUpgrade(ctx)
	}
	return nil, fmt.Errorf("unknown Card field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case card.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case card.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case card.FieldEnergy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnergy(v)
		return nil
	case card.FieldTarget:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTarget(v)
		return nil
	case card.FieldBlock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlock(v)
		return nil
	case card.FieldDamage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDamage(v)
		return nil
	case card.FieldPower:
		v, ok := value.(map[string]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPower(v)
		return nil
	case card.FieldAction:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case card.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case card.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case card.FieldUpgrade:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpgrade(v)
		return nil
	}
	return fmt.Errorf("unknown Card field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CardMutation) AddedFields() []string {
	var fields []string
	if m.add_Energy != nil {
		fields = append(fields, card.FieldEnergy)
	}
	if m.add_Block != nil {
		fields = append(fields, card.FieldBlock)
	}
	if m.add_Damage != nil {
		fields = append(fields, card.FieldDamage)
	}
	if m.add_Upgrade != nil {
		fields = append(fields, card.FieldUpgrade)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CardMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case card.FieldEnergy:
		return m.AddedEnergy()
	case card.FieldBlock:
		return m.AddedBlock()
	case card.FieldDamage:
		return m.AddedDamage()
	case card.FieldUpgrade:
		return m.AddedUpgrade()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CardMutation) AddField(name string, value ent.Value) error {
	switch name {
	case card.FieldEnergy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEnergy(v)
		return nil
	case card.FieldBlock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlock(v)
		return nil
	case card.FieldDamage:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDamage(v)
		return nil
	case card.FieldUpgrade:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpgrade(v)
		return nil
	}
	return fmt.Errorf("unknown Card numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CardMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CardMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Card nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CardMutation) ResetField(name string) error {
	switch name {
	case card.FieldName:
		m.ResetName()
		return nil
	case card.FieldType:
		m.ResetType()
		return nil
	case card.FieldEnergy:
		m.ResetEnergy()
		return nil
	case card.FieldTarget:
		m.ResetTarget()
		return nil
	case card.FieldBlock:
		m.ResetBlock()
		return nil
	case card.FieldDamage:
		m.ResetDamage()
		return nil
	case card.FieldPower:
		m.ResetPower()
		return nil
	case card.FieldAction:
		m.ResetAction()
		return nil
	case card.FieldDescription:
		m.ResetDescription()
		return nil
	case card.FieldImage:
		m.ResetImage()
		return nil
	case card.FieldUpgrade:
		m.ResetUpgrade()
		return nil
	}
	return fmt.Errorf("unknown Card field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CardMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CardMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CardMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CardMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CardMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Card unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CardMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Card edge %s", name)
}

// MonsterMutation represents an operation that mutates the Monster nodes in the graph.
type MonsterMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	_Name              *string
	_Type              *string
	_HP                *int
	add_HP             *int
	_Block             *int
	add_Block          *int
	_Power             *map[string]int
	_ActionName        *[]string
	append_ActionName  []string
	_ActionValue       *[]int
	append_ActionValue []int
	_Image             *string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Monster, error)
	predicates         []predicate.Monster
}

var _ ent.Mutation = (*MonsterMutation)(nil)

// monsterOption allows management of the mutation configuration using functional options.
type monsterOption func(*MonsterMutation)

// newMonsterMutation creates new mutation for the Monster entity.
func newMonsterMutation(c config, op Op, opts ...monsterOption) *MonsterMutation {
	m := &MonsterMutation{
		config:        c,
		op:            op,
		typ:           TypeMonster,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMonsterID sets the ID field of the mutation.
func withMonsterID(id int) monsterOption {
	return func(m *MonsterMutation) {
		var (
			err   error
			once  sync.Once
			value *Monster
		)
		m.oldValue = func(ctx context.Context) (*Monster, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Monster.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMonster sets the old Monster of the mutation.
func withMonster(node *Monster) monsterOption {
	return func(m *MonsterMutation) {
		m.oldValue = func(context.Context) (*Monster, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MonsterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MonsterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MonsterMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MonsterMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Monster.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "Name" field.
func (m *MonsterMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *MonsterMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Monster entity.
// If the Monster object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MonsterMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *MonsterMutation) ResetName() {
	m._Name = nil
}

// SetType sets the "Type" field.
func (m *MonsterMutation) SetType(s string) {
	m._Type = &s
}

// GetType returns the value of the "Type" field in the mutation.
func (m *MonsterMutation) GetType() (r string, exists bool) {
	v := m._Type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "Type" field's value of the Monster entity.
// If the Monster object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MonsterMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "Type" field.
func (m *MonsterMutation) ResetType() {
	m._Type = nil
}

// SetHP sets the "HP" field.
func (m *MonsterMutation) SetHP(i int) {
	m._HP = &i
	m.add_HP = nil
}

// HP returns the value of the "HP" field in the mutation.
func (m *MonsterMutation) HP() (r int, exists bool) {
	v := m._HP
	if v == nil {
		return
	}
	return *v, true
}

// OldHP returns the old "HP" field's value of the Monster entity.
// If the Monster object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MonsterMutation) OldHP(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHP: %w", err)
	}
	return oldValue.HP, nil
}

// AddHP adds i to the "HP" field.
func (m *MonsterMutation) AddHP(i int) {
	if m.add_HP != nil {
		*m.add_HP += i
	} else {
		m.add_HP = &i
	}
}

// AddedHP returns the value that was added to the "HP" field in this mutation.
func (m *MonsterMutation) AddedHP() (r int, exists bool) {
	v := m.add_HP
	if v == nil {
		return
	}
	return *v, true
}

// ResetHP resets all changes to the "HP" field.
func (m *MonsterMutation) ResetHP() {
	m._HP = nil
	m.add_HP = nil
}

// SetBlock sets the "Block" field.
func (m *MonsterMutation) SetBlock(i int) {
	m._Block = &i
	m.add_Block = nil
}

// Block returns the value of the "Block" field in the mutation.
func (m *MonsterMutation) Block() (r int, exists bool) {
	v := m._Block
	if v == nil {
		return
	}
	return *v, true
}

// OldBlock returns the old "Block" field's value of the Monster entity.
// If the Monster object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MonsterMutation) OldBlock(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlock: %w", err)
	}
	return oldValue.Block, nil
}

// AddBlock adds i to the "Block" field.
func (m *MonsterMutation) AddBlock(i int) {
	if m.add_Block != nil {
		*m.add_Block += i
	} else {
		m.add_Block = &i
	}
}

// AddedBlock returns the value that was added to the "Block" field in this mutation.
func (m *MonsterMutation) AddedBlock() (r int, exists bool) {
	v := m.add_Block
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlock resets all changes to the "Block" field.
func (m *MonsterMutation) ResetBlock() {
	m._Block = nil
	m.add_Block = nil
}

// SetPower sets the "Power" field.
func (m *MonsterMutation) SetPower(value map[string]int) {
	m._Power = &value
}

// Power returns the value of the "Power" field in the mutation.
func (m *MonsterMutation) Power() (r map[string]int, exists bool) {
	v := m._Power
	if v == nil {
		return
	}
	return *v, true
}

// OldPower returns the old "Power" field's value of the Monster entity.
// If the Monster object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MonsterMutation) OldPower(ctx context.Context) (v map[string]int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPower: %w", err)
	}
	return oldValue.Power, nil
}

// ResetPower resets all changes to the "Power" field.
func (m *MonsterMutation) ResetPower() {
	m._Power = nil
}

// SetActionName sets the "ActionName" field.
func (m *MonsterMutation) SetActionName(s []string) {
	m._ActionName = &s
	m.append_ActionName = nil
}

// ActionName returns the value of the "ActionName" field in the mutation.
func (m *MonsterMutation) ActionName() (r []string, exists bool) {
	v := m._ActionName
	if v == nil {
		return
	}
	return *v, true
}

// OldActionName returns the old "ActionName" field's value of the Monster entity.
// If the Monster object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MonsterMutation) OldActionName(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionName: %w", err)
	}
	return oldValue.ActionName, nil
}

// AppendActionName adds s to the "ActionName" field.
func (m *MonsterMutation) AppendActionName(s []string) {
	m.append_ActionName = append(m.append_ActionName, s...)
}

// AppendedActionName returns the list of values that were appended to the "ActionName" field in this mutation.
func (m *MonsterMutation) AppendedActionName() ([]string, bool) {
	if len(m.append_ActionName) == 0 {
		return nil, false
	}
	return m.append_ActionName, true
}

// ResetActionName resets all changes to the "ActionName" field.
func (m *MonsterMutation) ResetActionName() {
	m._ActionName = nil
	m.append_ActionName = nil
}

// SetActionValue sets the "ActionValue" field.
func (m *MonsterMutation) SetActionValue(i []int) {
	m._ActionValue = &i
	m.append_ActionValue = nil
}

// ActionValue returns the value of the "ActionValue" field in the mutation.
func (m *MonsterMutation) ActionValue() (r []int, exists bool) {
	v := m._ActionValue
	if v == nil {
		return
	}
	return *v, true
}

// OldActionValue returns the old "ActionValue" field's value of the Monster entity.
// If the Monster object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MonsterMutation) OldActionValue(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionValue: %w", err)
	}
	return oldValue.ActionValue, nil
}

// AppendActionValue adds i to the "ActionValue" field.
func (m *MonsterMutation) AppendActionValue(i []int) {
	m.append_ActionValue = append(m.append_ActionValue, i...)
}

// AppendedActionValue returns the list of values that were appended to the "ActionValue" field in this mutation.
func (m *MonsterMutation) AppendedActionValue() ([]int, bool) {
	if len(m.append_ActionValue) == 0 {
		return nil, false
	}
	return m.append_ActionValue, true
}

// ResetActionValue resets all changes to the "ActionValue" field.
func (m *MonsterMutation) ResetActionValue() {
	m._ActionValue = nil
	m.append_ActionValue = nil
}

// SetImage sets the "Image" field.
func (m *MonsterMutation) SetImage(s string) {
	m._Image = &s
}

// Image returns the value of the "Image" field in the mutation.
func (m *MonsterMutation) Image() (r string, exists bool) {
	v := m._Image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "Image" field's value of the Monster entity.
// If the Monster object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MonsterMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "Image" field.
func (m *MonsterMutation) ResetImage() {
	m._Image = nil
}

// Where appends a list predicates to the MonsterMutation builder.
func (m *MonsterMutation) Where(ps ...predicate.Monster) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MonsterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MonsterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Monster, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MonsterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MonsterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Monster).
func (m *MonsterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MonsterMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m._Name != nil {
		fields = append(fields, monster.FieldName)
	}
	if m._Type != nil {
		fields = append(fields, monster.FieldType)
	}
	if m._HP != nil {
		fields = append(fields, monster.FieldHP)
	}
	if m._Block != nil {
		fields = append(fields, monster.FieldBlock)
	}
	if m._Power != nil {
		fields = append(fields, monster.FieldPower)
	}
	if m._ActionName != nil {
		fields = append(fields, monster.FieldActionName)
	}
	if m._ActionValue != nil {
		fields = append(fields, monster.FieldActionValue)
	}
	if m._Image != nil {
		fields = append(fields, monster.FieldImage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MonsterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case monster.FieldName:
		return m.Name()
	case monster.FieldType:
		return m.GetType()
	case monster.FieldHP:
		return m.HP()
	case monster.FieldBlock:
		return m.Block()
	case monster.FieldPower:
		return m.Power()
	case monster.FieldActionName:
		return m.ActionName()
	case monster.FieldActionValue:
		return m.ActionValue()
	case monster.FieldImage:
		return m.Image()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MonsterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case monster.FieldName:
		return m.OldName(ctx)
	case monster.FieldType:
		return m.OldType(ctx)
	case monster.FieldHP:
		return m.OldHP(ctx)
	case monster.FieldBlock:
		return m.OldBlock(ctx)
	case monster.FieldPower:
		return m.OldPower(ctx)
	case monster.FieldActionName:
		return m.OldActionName(ctx)
	case monster.FieldActionValue:
		return m.OldActionValue(ctx)
	case monster.FieldImage:
		return m.OldImage(ctx)
	}
	return nil, fmt.Errorf("unknown Monster field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MonsterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case monster.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case monster.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case monster.FieldHP:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHP(v)
		return nil
	case monster.FieldBlock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlock(v)
		return nil
	case monster.FieldPower:
		v, ok := value.(map[string]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPower(v)
		return nil
	case monster.FieldActionName:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionName(v)
		return nil
	case monster.FieldActionValue:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionValue(v)
		return nil
	case monster.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	}
	return fmt.Errorf("unknown Monster field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MonsterMutation) AddedFields() []string {
	var fields []string
	if m.add_HP != nil {
		fields = append(fields, monster.FieldHP)
	}
	if m.add_Block != nil {
		fields = append(fields, monster.FieldBlock)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MonsterMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case monster.FieldHP:
		return m.AddedHP()
	case monster.FieldBlock:
		return m.AddedBlock()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MonsterMutation) AddField(name string, value ent.Value) error {
	switch name {
	case monster.FieldHP:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHP(v)
		return nil
	case monster.FieldBlock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlock(v)
		return nil
	}
	return fmt.Errorf("unknown Monster numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MonsterMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MonsterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MonsterMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Monster nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MonsterMutation) ResetField(name string) error {
	switch name {
	case monster.FieldName:
		m.ResetName()
		return nil
	case monster.FieldType:
		m.ResetType()
		return nil
	case monster.FieldHP:
		m.ResetHP()
		return nil
	case monster.FieldBlock:
		m.ResetBlock()
		return nil
	case monster.FieldPower:
		m.ResetPower()
		return nil
	case monster.FieldActionName:
		m.ResetActionName()
		return nil
	case monster.FieldActionValue:
		m.ResetActionValue()
		return nil
	case monster.FieldImage:
		m.ResetImage()
		return nil
	}
	return fmt.Errorf("unknown Monster field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MonsterMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MonsterMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MonsterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MonsterMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MonsterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MonsterMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MonsterMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Monster unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MonsterMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Monster edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	password      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// UserConfigMutation represents an operation that mutates the UserConfig nodes in the graph.
type UserConfigMutation struct {
	config
	op              Op
	typ             string
	id              *int
	playerID        *string
	cards           *[]string
	appendcards     []string
	ladder          *string
	playerHP        *int
	addplayerHP     *int
	playerEnergy    *int
	addplayerEnergy *int
	image           *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*UserConfig, error)
	predicates      []predicate.UserConfig
}

var _ ent.Mutation = (*UserConfigMutation)(nil)

// userconfigOption allows management of the mutation configuration using functional options.
type userconfigOption func(*UserConfigMutation)

// newUserConfigMutation creates new mutation for the UserConfig entity.
func newUserConfigMutation(c config, op Op, opts ...userconfigOption) *UserConfigMutation {
	m := &UserConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeUserConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserConfigID sets the ID field of the mutation.
func withUserConfigID(id int) userconfigOption {
	return func(m *UserConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *UserConfig
		)
		m.oldValue = func(ctx context.Context) (*UserConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserConfig sets the old UserConfig of the mutation.
func withUserConfig(node *UserConfig) userconfigOption {
	return func(m *UserConfigMutation) {
		m.oldValue = func(context.Context) (*UserConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserConfigMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserConfigMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPlayerID sets the "playerID" field.
func (m *UserConfigMutation) SetPlayerID(s string) {
	m.playerID = &s
}

// PlayerID returns the value of the "playerID" field in the mutation.
func (m *UserConfigMutation) PlayerID() (r string, exists bool) {
	v := m.playerID
	if v == nil {
		return
	}
	return *v, true
}

// OldPlayerID returns the old "playerID" field's value of the UserConfig entity.
// If the UserConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserConfigMutation) OldPlayerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlayerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlayerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlayerID: %w", err)
	}
	return oldValue.PlayerID, nil
}

// ResetPlayerID resets all changes to the "playerID" field.
func (m *UserConfigMutation) ResetPlayerID() {
	m.playerID = nil
}

// SetCards sets the "cards" field.
func (m *UserConfigMutation) SetCards(s []string) {
	m.cards = &s
	m.appendcards = nil
}

// Cards returns the value of the "cards" field in the mutation.
func (m *UserConfigMutation) Cards() (r []string, exists bool) {
	v := m.cards
	if v == nil {
		return
	}
	return *v, true
}

// OldCards returns the old "cards" field's value of the UserConfig entity.
// If the UserConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserConfigMutation) OldCards(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCards is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCards requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCards: %w", err)
	}
	return oldValue.Cards, nil
}

// AppendCards adds s to the "cards" field.
func (m *UserConfigMutation) AppendCards(s []string) {
	m.appendcards = append(m.appendcards, s...)
}

// AppendedCards returns the list of values that were appended to the "cards" field in this mutation.
func (m *UserConfigMutation) AppendedCards() ([]string, bool) {
	if len(m.appendcards) == 0 {
		return nil, false
	}
	return m.appendcards, true
}

// ResetCards resets all changes to the "cards" field.
func (m *UserConfigMutation) ResetCards() {
	m.cards = nil
	m.appendcards = nil
}

// SetLadder sets the "ladder" field.
func (m *UserConfigMutation) SetLadder(s string) {
	m.ladder = &s
}

// Ladder returns the value of the "ladder" field in the mutation.
func (m *UserConfigMutation) Ladder() (r string, exists bool) {
	v := m.ladder
	if v == nil {
		return
	}
	return *v, true
}

// OldLadder returns the old "ladder" field's value of the UserConfig entity.
// If the UserConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserConfigMutation) OldLadder(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLadder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLadder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLadder: %w", err)
	}
	return oldValue.Ladder, nil
}

// ResetLadder resets all changes to the "ladder" field.
func (m *UserConfigMutation) ResetLadder() {
	m.ladder = nil
}

// SetPlayerHP sets the "playerHP" field.
func (m *UserConfigMutation) SetPlayerHP(i int) {
	m.playerHP = &i
	m.addplayerHP = nil
}

// PlayerHP returns the value of the "playerHP" field in the mutation.
func (m *UserConfigMutation) PlayerHP() (r int, exists bool) {
	v := m.playerHP
	if v == nil {
		return
	}
	return *v, true
}

// OldPlayerHP returns the old "playerHP" field's value of the UserConfig entity.
// If the UserConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserConfigMutation) OldPlayerHP(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlayerHP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlayerHP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlayerHP: %w", err)
	}
	return oldValue.PlayerHP, nil
}

// AddPlayerHP adds i to the "playerHP" field.
func (m *UserConfigMutation) AddPlayerHP(i int) {
	if m.addplayerHP != nil {
		*m.addplayerHP += i
	} else {
		m.addplayerHP = &i
	}
}

// AddedPlayerHP returns the value that was added to the "playerHP" field in this mutation.
func (m *UserConfigMutation) AddedPlayerHP() (r int, exists bool) {
	v := m.addplayerHP
	if v == nil {
		return
	}
	return *v, true
}

// ResetPlayerHP resets all changes to the "playerHP" field.
func (m *UserConfigMutation) ResetPlayerHP() {
	m.playerHP = nil
	m.addplayerHP = nil
}

// SetPlayerEnergy sets the "playerEnergy" field.
func (m *UserConfigMutation) SetPlayerEnergy(i int) {
	m.playerEnergy = &i
	m.addplayerEnergy = nil
}

// PlayerEnergy returns the value of the "playerEnergy" field in the mutation.
func (m *UserConfigMutation) PlayerEnergy() (r int, exists bool) {
	v := m.playerEnergy
	if v == nil {
		return
	}
	return *v, true
}

// OldPlayerEnergy returns the old "playerEnergy" field's value of the UserConfig entity.
// If the UserConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserConfigMutation) OldPlayerEnergy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlayerEnergy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlayerEnergy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlayerEnergy: %w", err)
	}
	return oldValue.PlayerEnergy, nil
}

// AddPlayerEnergy adds i to the "playerEnergy" field.
func (m *UserConfigMutation) AddPlayerEnergy(i int) {
	if m.addplayerEnergy != nil {
		*m.addplayerEnergy += i
	} else {
		m.addplayerEnergy = &i
	}
}

// AddedPlayerEnergy returns the value that was added to the "playerEnergy" field in this mutation.
func (m *UserConfigMutation) AddedPlayerEnergy() (r int, exists bool) {
	v := m.addplayerEnergy
	if v == nil {
		return
	}
	return *v, true
}

// ResetPlayerEnergy resets all changes to the "playerEnergy" field.
func (m *UserConfigMutation) ResetPlayerEnergy() {
	m.playerEnergy = nil
	m.addplayerEnergy = nil
}

// SetImage sets the "image" field.
func (m *UserConfigMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *UserConfigMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the UserConfig entity.
// If the UserConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserConfigMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ClearImage clears the value of the "image" field.
func (m *UserConfigMutation) ClearImage() {
	m.image = nil
	m.clearedFields[userconfig.FieldImage] = struct{}{}
}

// ImageCleared returns if the "image" field was cleared in this mutation.
func (m *UserConfigMutation) ImageCleared() bool {
	_, ok := m.clearedFields[userconfig.FieldImage]
	return ok
}

// ResetImage resets all changes to the "image" field.
func (m *UserConfigMutation) ResetImage() {
	m.image = nil
	delete(m.clearedFields, userconfig.FieldImage)
}

// Where appends a list predicates to the UserConfigMutation builder.
func (m *UserConfigMutation) Where(ps ...predicate.UserConfig) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserConfigMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserConfigMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserConfig, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserConfigMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserConfigMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserConfig).
func (m *UserConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserConfigMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.playerID != nil {
		fields = append(fields, userconfig.FieldPlayerID)
	}
	if m.cards != nil {
		fields = append(fields, userconfig.FieldCards)
	}
	if m.ladder != nil {
		fields = append(fields, userconfig.FieldLadder)
	}
	if m.playerHP != nil {
		fields = append(fields, userconfig.FieldPlayerHP)
	}
	if m.playerEnergy != nil {
		fields = append(fields, userconfig.FieldPlayerEnergy)
	}
	if m.image != nil {
		fields = append(fields, userconfig.FieldImage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userconfig.FieldPlayerID:
		return m.PlayerID()
	case userconfig.FieldCards:
		return m.Cards()
	case userconfig.FieldLadder:
		return m.Ladder()
	case userconfig.FieldPlayerHP:
		return m.PlayerHP()
	case userconfig.FieldPlayerEnergy:
		return m.PlayerEnergy()
	case userconfig.FieldImage:
		return m.Image()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userconfig.FieldPlayerID:
		return m.OldPlayerID(ctx)
	case userconfig.FieldCards:
		return m.OldCards(ctx)
	case userconfig.FieldLadder:
		return m.OldLadder(ctx)
	case userconfig.FieldPlayerHP:
		return m.OldPlayerHP(ctx)
	case userconfig.FieldPlayerEnergy:
		return m.OldPlayerEnergy(ctx)
	case userconfig.FieldImage:
		return m.OldImage(ctx)
	}
	return nil, fmt.Errorf("unknown UserConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userconfig.FieldPlayerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlayerID(v)
		return nil
	case userconfig.FieldCards:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCards(v)
		return nil
	case userconfig.FieldLadder:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLadder(v)
		return nil
	case userconfig.FieldPlayerHP:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlayerHP(v)
		return nil
	case userconfig.FieldPlayerEnergy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlayerEnergy(v)
		return nil
	case userconfig.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	}
	return fmt.Errorf("unknown UserConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserConfigMutation) AddedFields() []string {
	var fields []string
	if m.addplayerHP != nil {
		fields = append(fields, userconfig.FieldPlayerHP)
	}
	if m.addplayerEnergy != nil {
		fields = append(fields, userconfig.FieldPlayerEnergy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserConfigMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userconfig.FieldPlayerHP:
		return m.AddedPlayerHP()
	case userconfig.FieldPlayerEnergy:
		return m.AddedPlayerEnergy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userconfig.FieldPlayerHP:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlayerHP(v)
		return nil
	case userconfig.FieldPlayerEnergy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlayerEnergy(v)
		return nil
	}
	return fmt.Errorf("unknown UserConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserConfigMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userconfig.FieldImage) {
		fields = append(fields, userconfig.FieldImage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserConfigMutation) ClearField(name string) error {
	switch name {
	case userconfig.FieldImage:
		m.ClearImage()
		return nil
	}
	return fmt.Errorf("unknown UserConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserConfigMutation) ResetField(name string) error {
	switch name {
	case userconfig.FieldPlayerID:
		m.ResetPlayerID()
		return nil
	case userconfig.FieldCards:
		m.ResetCards()
		return nil
	case userconfig.FieldLadder:
		m.ResetLadder()
		return nil
	case userconfig.FieldPlayerHP:
		m.ResetPlayerHP()
		return nil
	case userconfig.FieldPlayerEnergy:
		m.ResetPlayerEnergy()
		return nil
	case userconfig.FieldImage:
		m.ResetImage()
		return nil
	}
	return fmt.Errorf("unknown UserConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserConfig edge %s", name)
}
