// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cardGame/ent/card"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CardCreate is the builder for creating a Card entity.
type CardCreate struct {
	config
	mutation *CardMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (cc *CardCreate) SetName(s string) *CardCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetType sets the "Type" field.
func (cc *CardCreate) SetType(s string) *CardCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetEnergy sets the "Energy" field.
func (cc *CardCreate) SetEnergy(i int) *CardCreate {
	cc.mutation.SetEnergy(i)
	return cc
}

// SetTarget sets the "Target" field.
func (cc *CardCreate) SetTarget(s string) *CardCreate {
	cc.mutation.SetTarget(s)
	return cc
}

// SetBlock sets the "Block" field.
func (cc *CardCreate) SetBlock(i int) *CardCreate {
	cc.mutation.SetBlock(i)
	return cc
}

// SetDamage sets the "Damage" field.
func (cc *CardCreate) SetDamage(i int) *CardCreate {
	cc.mutation.SetDamage(i)
	return cc
}

// SetPower sets the "Power" field.
func (cc *CardCreate) SetPower(m map[string]int) *CardCreate {
	cc.mutation.SetPower(m)
	return cc
}

// SetAction sets the "Action" field.
func (cc *CardCreate) SetAction(s []string) *CardCreate {
	cc.mutation.SetAction(s)
	return cc
}

// SetDescription sets the "Description" field.
func (cc *CardCreate) SetDescription(s string) *CardCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetImage sets the "Image" field.
func (cc *CardCreate) SetImage(s string) *CardCreate {
	cc.mutation.SetImage(s)
	return cc
}

// SetUpgrade sets the "Upgrade" field.
func (cc *CardCreate) SetUpgrade(i int) *CardCreate {
	cc.mutation.SetUpgrade(i)
	return cc
}

// Mutation returns the CardMutation object of the builder.
func (cc *CardCreate) Mutation() *CardMutation {
	return cc.mutation
}

// Save creates the Card in the database.
func (cc *CardCreate) Save(ctx context.Context) (*Card, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CardCreate) SaveX(ctx context.Context) *Card {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CardCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CardCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CardCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Card.Name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := card.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Card.Name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "Type", err: errors.New(`ent: missing required field "Card.Type"`)}
	}
	if _, ok := cc.mutation.Energy(); !ok {
		return &ValidationError{Name: "Energy", err: errors.New(`ent: missing required field "Card.Energy"`)}
	}
	if _, ok := cc.mutation.Target(); !ok {
		return &ValidationError{Name: "Target", err: errors.New(`ent: missing required field "Card.Target"`)}
	}
	if _, ok := cc.mutation.Block(); !ok {
		return &ValidationError{Name: "Block", err: errors.New(`ent: missing required field "Card.Block"`)}
	}
	if _, ok := cc.mutation.Damage(); !ok {
		return &ValidationError{Name: "Damage", err: errors.New(`ent: missing required field "Card.Damage"`)}
	}
	if _, ok := cc.mutation.Power(); !ok {
		return &ValidationError{Name: "Power", err: errors.New(`ent: missing required field "Card.Power"`)}
	}
	if _, ok := cc.mutation.Action(); !ok {
		return &ValidationError{Name: "Action", err: errors.New(`ent: missing required field "Card.Action"`)}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "Description", err: errors.New(`ent: missing required field "Card.Description"`)}
	}
	if _, ok := cc.mutation.Image(); !ok {
		return &ValidationError{Name: "Image", err: errors.New(`ent: missing required field "Card.Image"`)}
	}
	if _, ok := cc.mutation.Upgrade(); !ok {
		return &ValidationError{Name: "Upgrade", err: errors.New(`ent: missing required field "Card.Upgrade"`)}
	}
	return nil
}

func (cc *CardCreate) sqlSave(ctx context.Context) (*Card, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CardCreate) createSpec() (*Card, *sqlgraph.CreateSpec) {
	var (
		_node = &Card{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(card.Table, sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(card.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(card.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Energy(); ok {
		_spec.SetField(card.FieldEnergy, field.TypeInt, value)
		_node.Energy = value
	}
	if value, ok := cc.mutation.Target(); ok {
		_spec.SetField(card.FieldTarget, field.TypeString, value)
		_node.Target = value
	}
	if value, ok := cc.mutation.Block(); ok {
		_spec.SetField(card.FieldBlock, field.TypeInt, value)
		_node.Block = value
	}
	if value, ok := cc.mutation.Damage(); ok {
		_spec.SetField(card.FieldDamage, field.TypeInt, value)
		_node.Damage = value
	}
	if value, ok := cc.mutation.Power(); ok {
		_spec.SetField(card.FieldPower, field.TypeJSON, value)
		_node.Power = value
	}
	if value, ok := cc.mutation.Action(); ok {
		_spec.SetField(card.FieldAction, field.TypeJSON, value)
		_node.Action = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(card.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Image(); ok {
		_spec.SetField(card.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := cc.mutation.Upgrade(); ok {
		_spec.SetField(card.FieldUpgrade, field.TypeInt, value)
		_node.Upgrade = value
	}
	return _node, _spec
}

// CardCreateBulk is the builder for creating many Card entities in bulk.
type CardCreateBulk struct {
	config
	err      error
	builders []*CardCreate
}

// Save creates the Card entities in the database.
func (ccb *CardCreateBulk) Save(ctx context.Context) ([]*Card, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Card, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CardCreateBulk) SaveX(ctx context.Context) []*Card {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CardCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CardCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
