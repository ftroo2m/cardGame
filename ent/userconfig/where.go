// Code generated by ent, DO NOT EDIT.

package userconfig

import (
	"cardGame/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLTE(FieldID, id))
}

// PlayerID applies equality check predicate on the "playerID" field. It's identical to PlayerIDEQ.
func PlayerID(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldPlayerID, v))
}

// Ladder applies equality check predicate on the "ladder" field. It's identical to LadderEQ.
func Ladder(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldLadder, v))
}

// PlayerHP applies equality check predicate on the "playerHP" field. It's identical to PlayerHPEQ.
func PlayerHP(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldPlayerHP, v))
}

// PlayerEnergy applies equality check predicate on the "playerEnergy" field. It's identical to PlayerEnergyEQ.
func PlayerEnergy(v int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldPlayerEnergy, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldImage, v))
}

// PlayerIDEQ applies the EQ predicate on the "playerID" field.
func PlayerIDEQ(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldPlayerID, v))
}

// PlayerIDNEQ applies the NEQ predicate on the "playerID" field.
func PlayerIDNEQ(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNEQ(FieldPlayerID, v))
}

// PlayerIDIn applies the In predicate on the "playerID" field.
func PlayerIDIn(vs ...string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldIn(FieldPlayerID, vs...))
}

// PlayerIDNotIn applies the NotIn predicate on the "playerID" field.
func PlayerIDNotIn(vs ...string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNotIn(FieldPlayerID, vs...))
}

// PlayerIDGT applies the GT predicate on the "playerID" field.
func PlayerIDGT(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGT(FieldPlayerID, v))
}

// PlayerIDGTE applies the GTE predicate on the "playerID" field.
func PlayerIDGTE(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGTE(FieldPlayerID, v))
}

// PlayerIDLT applies the LT predicate on the "playerID" field.
func PlayerIDLT(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLT(FieldPlayerID, v))
}

// PlayerIDLTE applies the LTE predicate on the "playerID" field.
func PlayerIDLTE(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLTE(FieldPlayerID, v))
}

// PlayerIDContains applies the Contains predicate on the "playerID" field.
func PlayerIDContains(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldContains(FieldPlayerID, v))
}

// PlayerIDHasPrefix applies the HasPrefix predicate on the "playerID" field.
func PlayerIDHasPrefix(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldHasPrefix(FieldPlayerID, v))
}

// PlayerIDHasSuffix applies the HasSuffix predicate on the "playerID" field.
func PlayerIDHasSuffix(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldHasSuffix(FieldPlayerID, v))
}

// PlayerIDEqualFold applies the EqualFold predicate on the "playerID" field.
func PlayerIDEqualFold(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEqualFold(FieldPlayerID, v))
}

// PlayerIDContainsFold applies the ContainsFold predicate on the "playerID" field.
func PlayerIDContainsFold(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldContainsFold(FieldPlayerID, v))
}

// LadderEQ applies the EQ predicate on the "ladder" field.
func LadderEQ(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldLadder, v))
}

// LadderNEQ applies the NEQ predicate on the "ladder" field.
func LadderNEQ(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNEQ(FieldLadder, v))
}

// LadderIn applies the In predicate on the "ladder" field.
func LadderIn(vs ...string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldIn(FieldLadder, vs...))
}

// LadderNotIn applies the NotIn predicate on the "ladder" field.
func LadderNotIn(vs ...string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNotIn(FieldLadder, vs...))
}

// LadderGT applies the GT predicate on the "ladder" field.
func LadderGT(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGT(FieldLadder, v))
}

// LadderGTE applies the GTE predicate on the "ladder" field.
func LadderGTE(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGTE(FieldLadder, v))
}

// LadderLT applies the LT predicate on the "ladder" field.
func LadderLT(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLT(FieldLadder, v))
}

// LadderLTE applies the LTE predicate on the "ladder" field.
func LadderLTE(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLTE(FieldLadder, v))
}

// LadderContains applies the Contains predicate on the "ladder" field.
func LadderContains(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldContains(FieldLadder, v))
}

// LadderHasPrefix applies the HasPrefix predicate on the "ladder" field.
func LadderHasPrefix(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldHasPrefix(FieldLadder, v))
}

// LadderHasSuffix applies the HasSuffix predicate on the "ladder" field.
func LadderHasSuffix(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldHasSuffix(FieldLadder, v))
}

// LadderEqualFold applies the EqualFold predicate on the "ladder" field.
func LadderEqualFold(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEqualFold(FieldLadder, v))
}

// LadderContainsFold applies the ContainsFold predicate on the "ladder" field.
func LadderContainsFold(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldContainsFold(FieldLadder, v))
}

// PlayerHPEQ applies the EQ predicate on the "playerHP" field.
func PlayerHPEQ(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldPlayerHP, v))
}

// PlayerHPNEQ applies the NEQ predicate on the "playerHP" field.
func PlayerHPNEQ(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNEQ(FieldPlayerHP, v))
}

// PlayerHPIn applies the In predicate on the "playerHP" field.
func PlayerHPIn(vs ...string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldIn(FieldPlayerHP, vs...))
}

// PlayerHPNotIn applies the NotIn predicate on the "playerHP" field.
func PlayerHPNotIn(vs ...string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNotIn(FieldPlayerHP, vs...))
}

// PlayerHPGT applies the GT predicate on the "playerHP" field.
func PlayerHPGT(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGT(FieldPlayerHP, v))
}

// PlayerHPGTE applies the GTE predicate on the "playerHP" field.
func PlayerHPGTE(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGTE(FieldPlayerHP, v))
}

// PlayerHPLT applies the LT predicate on the "playerHP" field.
func PlayerHPLT(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLT(FieldPlayerHP, v))
}

// PlayerHPLTE applies the LTE predicate on the "playerHP" field.
func PlayerHPLTE(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLTE(FieldPlayerHP, v))
}

// PlayerHPContains applies the Contains predicate on the "playerHP" field.
func PlayerHPContains(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldContains(FieldPlayerHP, v))
}

// PlayerHPHasPrefix applies the HasPrefix predicate on the "playerHP" field.
func PlayerHPHasPrefix(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldHasPrefix(FieldPlayerHP, v))
}

// PlayerHPHasSuffix applies the HasSuffix predicate on the "playerHP" field.
func PlayerHPHasSuffix(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldHasSuffix(FieldPlayerHP, v))
}

// PlayerHPEqualFold applies the EqualFold predicate on the "playerHP" field.
func PlayerHPEqualFold(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEqualFold(FieldPlayerHP, v))
}

// PlayerHPContainsFold applies the ContainsFold predicate on the "playerHP" field.
func PlayerHPContainsFold(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldContainsFold(FieldPlayerHP, v))
}

// PlayerEnergyEQ applies the EQ predicate on the "playerEnergy" field.
func PlayerEnergyEQ(v int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldPlayerEnergy, v))
}

// PlayerEnergyNEQ applies the NEQ predicate on the "playerEnergy" field.
func PlayerEnergyNEQ(v int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNEQ(FieldPlayerEnergy, v))
}

// PlayerEnergyIn applies the In predicate on the "playerEnergy" field.
func PlayerEnergyIn(vs ...int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldIn(FieldPlayerEnergy, vs...))
}

// PlayerEnergyNotIn applies the NotIn predicate on the "playerEnergy" field.
func PlayerEnergyNotIn(vs ...int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNotIn(FieldPlayerEnergy, vs...))
}

// PlayerEnergyGT applies the GT predicate on the "playerEnergy" field.
func PlayerEnergyGT(v int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGT(FieldPlayerEnergy, v))
}

// PlayerEnergyGTE applies the GTE predicate on the "playerEnergy" field.
func PlayerEnergyGTE(v int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGTE(FieldPlayerEnergy, v))
}

// PlayerEnergyLT applies the LT predicate on the "playerEnergy" field.
func PlayerEnergyLT(v int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLT(FieldPlayerEnergy, v))
}

// PlayerEnergyLTE applies the LTE predicate on the "playerEnergy" field.
func PlayerEnergyLTE(v int) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLTE(FieldPlayerEnergy, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldHasSuffix(FieldImage, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.UserConfig {
	return predicate.UserConfig(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.UserConfig {
	return predicate.UserConfig(sql.FieldNotNull(FieldImage))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.UserConfig {
	return predicate.UserConfig(sql.FieldContainsFold(FieldImage, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserConfig) predicate.UserConfig {
	return predicate.UserConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserConfig) predicate.UserConfig {
	return predicate.UserConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserConfig) predicate.UserConfig {
	return predicate.UserConfig(sql.NotPredicates(p))
}
