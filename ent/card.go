// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cardGame/ent/card"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Card is the model entity for the Card schema.
type Card struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Type holds the value of the "Type" field.
	Type string `json:"Type,omitempty"`
	// Energy holds the value of the "Energy" field.
	Energy int `json:"Energy,omitempty"`
	// Target holds the value of the "Target" field.
	Target string `json:"Target,omitempty"`
	// Block holds the value of the "Block" field.
	Block int `json:"Block,omitempty"`
	// Damage holds the value of the "Damage" field.
	Damage int `json:"Damage,omitempty"`
	// Power holds the value of the "Power" field.
	Power map[string]int `json:"Power,omitempty"`
	// Action holds the value of the "Action" field.
	Action []string `json:"Action,omitempty"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty"`
	// Image holds the value of the "Image" field.
	Image string `json:"Image,omitempty"`
	// Upgrade holds the value of the "Upgrade" field.
	Upgrade      int `json:"Upgrade,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Card) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case card.FieldPower, card.FieldAction:
			values[i] = new([]byte)
		case card.FieldID, card.FieldEnergy, card.FieldBlock, card.FieldDamage, card.FieldUpgrade:
			values[i] = new(sql.NullInt64)
		case card.FieldName, card.FieldType, card.FieldTarget, card.FieldDescription, card.FieldImage:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Card fields.
func (c *Card) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case card.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case card.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case card.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case card.FieldEnergy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Energy", values[i])
			} else if value.Valid {
				c.Energy = int(value.Int64)
			}
		case card.FieldTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Target", values[i])
			} else if value.Valid {
				c.Target = value.String
			}
		case card.FieldBlock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Block", values[i])
			} else if value.Valid {
				c.Block = int(value.Int64)
			}
		case card.FieldDamage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Damage", values[i])
			} else if value.Valid {
				c.Damage = int(value.Int64)
			}
		case card.FieldPower:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Power", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Power); err != nil {
					return fmt.Errorf("unmarshal field Power: %w", err)
				}
			}
		case card.FieldAction:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field Action", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Action); err != nil {
					return fmt.Errorf("unmarshal field Action: %w", err)
				}
			}
		case card.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case card.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Image", values[i])
			} else if value.Valid {
				c.Image = value.String
			}
		case card.FieldUpgrade:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Upgrade", values[i])
			} else if value.Valid {
				c.Upgrade = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Card.
// This includes values selected through modifiers, order, etc.
func (c *Card) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Card.
// Note that you need to call Card.Unwrap() before calling this method if this Card
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Card) Update() *CardUpdateOne {
	return NewCardClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Card entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Card) Unwrap() *Card {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Card is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Card) String() string {
	var builder strings.Builder
	builder.WriteString("Card(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("Name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("Type=")
	builder.WriteString(c.Type)
	builder.WriteString(", ")
	builder.WriteString("Energy=")
	builder.WriteString(fmt.Sprintf("%v", c.Energy))
	builder.WriteString(", ")
	builder.WriteString("Target=")
	builder.WriteString(c.Target)
	builder.WriteString(", ")
	builder.WriteString("Block=")
	builder.WriteString(fmt.Sprintf("%v", c.Block))
	builder.WriteString(", ")
	builder.WriteString("Damage=")
	builder.WriteString(fmt.Sprintf("%v", c.Damage))
	builder.WriteString(", ")
	builder.WriteString("Power=")
	builder.WriteString(fmt.Sprintf("%v", c.Power))
	builder.WriteString(", ")
	builder.WriteString("Action=")
	builder.WriteString(fmt.Sprintf("%v", c.Action))
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("Image=")
	builder.WriteString(c.Image)
	builder.WriteString(", ")
	builder.WriteString("Upgrade=")
	builder.WriteString(fmt.Sprintf("%v", c.Upgrade))
	builder.WriteByte(')')
	return builder.String()
}

// Cards is a parsable slice of Card.
type Cards []*Card
